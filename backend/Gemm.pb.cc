// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Gemm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Gemm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zmqsample {
class MatrixDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Matrix> {
} _Matrix_default_instance_;
class MatrixGemmDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MatrixGemm> {
} _MatrixGemm_default_instance_;

namespace protobuf_Gemm_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, dimensionx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, dimensiony_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, element_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixGemm, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixGemm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixGemm, matrixa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixGemm, matrixb_),
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(Matrix)},
  { 10, 16, sizeof(MatrixGemm)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Matrix_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MatrixGemm_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Gemm.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _Matrix_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _MatrixGemm_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Matrix_default_instance_.DefaultConstruct();
  _MatrixGemm_default_instance_.DefaultConstruct();
  _MatrixGemm_default_instance_.get_mutable()->matrixa_ = const_cast< ::zmqsample::Matrix*>(
      ::zmqsample::Matrix::internal_default_instance());
  _MatrixGemm_default_instance_.get_mutable()->matrixb_ = const_cast< ::zmqsample::Matrix*>(
      ::zmqsample::Matrix::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\nGemm.proto\022\tzmqsample\"A\n\006Matrix\022\022\n\ndim"
      "ensionX\030\001 \002(\005\022\022\n\ndimensionY\030\002 \002(\005\022\017\n\007ele"
      "ment\030\003 \003(\002\"T\n\nMatrixGemm\022\"\n\007matrixA\030\001 \002("
      "\0132\021.zmqsample.Matrix\022\"\n\007matrixB\030\002 \002(\0132\021."
      "zmqsample.Matrix"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 176);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Gemm.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_Gemm_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Matrix::kDimensionXFieldNumber;
const int Matrix::kDimensionYFieldNumber;
const int Matrix::kElementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Matrix::Matrix()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Gemm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zmqsample.Matrix)
}
Matrix::Matrix(const Matrix& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      element_(from.element_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dimensionx_, &from.dimensionx_,
    reinterpret_cast<char*>(&dimensiony_) -
    reinterpret_cast<char*>(&dimensionx_) + sizeof(dimensiony_));
  // @@protoc_insertion_point(copy_constructor:zmqsample.Matrix)
}

void Matrix::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&dimensionx_, 0, reinterpret_cast<char*>(&dimensiony_) -
    reinterpret_cast<char*>(&dimensionx_) + sizeof(dimensiony_));
}

Matrix::~Matrix() {
  // @@protoc_insertion_point(destructor:zmqsample.Matrix)
  SharedDtor();
}

void Matrix::SharedDtor() {
}

void Matrix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Matrix::descriptor() {
  protobuf_Gemm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Gemm_2eproto::file_level_metadata[0].descriptor;
}

const Matrix& Matrix::default_instance() {
  protobuf_Gemm_2eproto::InitDefaults();
  return *internal_default_instance();
}

Matrix* Matrix::New(::google::protobuf::Arena* arena) const {
  Matrix* n = new Matrix;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Matrix::Clear() {
// @@protoc_insertion_point(message_clear_start:zmqsample.Matrix)
  element_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&dimensionx_, 0, reinterpret_cast<char*>(&dimensiony_) -
      reinterpret_cast<char*>(&dimensionx_) + sizeof(dimensiony_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Matrix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zmqsample.Matrix)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dimensionX = 1;
      case 1: {
        if (tag == 8u) {
          set_has_dimensionx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dimensionx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 dimensionY = 2;
      case 2: {
        if (tag == 16u) {
          set_has_dimensiony();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dimensiony_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float element = 3;
      case 3: {
        if (tag == 29u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29u, input, this->mutable_element())));
        } else if (tag == 26u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_element())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zmqsample.Matrix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zmqsample.Matrix)
  return false;
#undef DO_
}

void Matrix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zmqsample.Matrix)
  // required int32 dimensionX = 1;
  if (has_dimensionx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dimensionx(), output);
  }

  // required int32 dimensionY = 2;
  if (has_dimensiony()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dimensiony(), output);
  }

  // repeated float element = 3;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->element(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zmqsample.Matrix)
}

::google::protobuf::uint8* Matrix::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zmqsample.Matrix)
  // required int32 dimensionX = 1;
  if (has_dimensionx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dimensionx(), target);
  }

  // required int32 dimensionY = 2;
  if (has_dimensiony()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dimensiony(), target);
  }

  // repeated float element = 3;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->element(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zmqsample.Matrix)
  return target;
}

size_t Matrix::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:zmqsample.Matrix)
  size_t total_size = 0;

  if (has_dimensionx()) {
    // required int32 dimensionX = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dimensionx());
  }

  if (has_dimensiony()) {
    // required int32 dimensionY = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dimensiony());
  }

  return total_size;
}
size_t Matrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zmqsample.Matrix)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 dimensionX = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dimensionx());

    // required int32 dimensionY = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dimensiony());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated float element = 3;
  {
    unsigned int count = this->element_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->element_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Matrix::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zmqsample.Matrix)
  GOOGLE_DCHECK_NE(&from, this);
  const Matrix* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Matrix>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zmqsample.Matrix)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zmqsample.Matrix)
    MergeFrom(*source);
  }
}

void Matrix::MergeFrom(const Matrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zmqsample.Matrix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  element_.MergeFrom(from.element_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_dimensionx()) {
      set_dimensionx(from.dimensionx());
    }
    if (from.has_dimensiony()) {
      set_dimensiony(from.dimensiony());
    }
  }
}

void Matrix::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zmqsample.Matrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Matrix::CopyFrom(const Matrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zmqsample.Matrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Matrix::Swap(Matrix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Matrix::InternalSwap(Matrix* other) {
  element_.UnsafeArenaSwap(&other->element_);
  std::swap(dimensionx_, other->dimensionx_);
  std::swap(dimensiony_, other->dimensiony_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Matrix::GetMetadata() const {
  protobuf_Gemm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Gemm_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Matrix

// required int32 dimensionX = 1;
bool Matrix::has_dimensionx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Matrix::set_has_dimensionx() {
  _has_bits_[0] |= 0x00000001u;
}
void Matrix::clear_has_dimensionx() {
  _has_bits_[0] &= ~0x00000001u;
}
void Matrix::clear_dimensionx() {
  dimensionx_ = 0;
  clear_has_dimensionx();
}
::google::protobuf::int32 Matrix::dimensionx() const {
  // @@protoc_insertion_point(field_get:zmqsample.Matrix.dimensionX)
  return dimensionx_;
}
void Matrix::set_dimensionx(::google::protobuf::int32 value) {
  set_has_dimensionx();
  dimensionx_ = value;
  // @@protoc_insertion_point(field_set:zmqsample.Matrix.dimensionX)
}

// required int32 dimensionY = 2;
bool Matrix::has_dimensiony() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Matrix::set_has_dimensiony() {
  _has_bits_[0] |= 0x00000002u;
}
void Matrix::clear_has_dimensiony() {
  _has_bits_[0] &= ~0x00000002u;
}
void Matrix::clear_dimensiony() {
  dimensiony_ = 0;
  clear_has_dimensiony();
}
::google::protobuf::int32 Matrix::dimensiony() const {
  // @@protoc_insertion_point(field_get:zmqsample.Matrix.dimensionY)
  return dimensiony_;
}
void Matrix::set_dimensiony(::google::protobuf::int32 value) {
  set_has_dimensiony();
  dimensiony_ = value;
  // @@protoc_insertion_point(field_set:zmqsample.Matrix.dimensionY)
}

// repeated float element = 3;
int Matrix::element_size() const {
  return element_.size();
}
void Matrix::clear_element() {
  element_.Clear();
}
float Matrix::element(int index) const {
  // @@protoc_insertion_point(field_get:zmqsample.Matrix.element)
  return element_.Get(index);
}
void Matrix::set_element(int index, float value) {
  element_.Set(index, value);
  // @@protoc_insertion_point(field_set:zmqsample.Matrix.element)
}
void Matrix::add_element(float value) {
  element_.Add(value);
  // @@protoc_insertion_point(field_add:zmqsample.Matrix.element)
}
const ::google::protobuf::RepeatedField< float >&
Matrix::element() const {
  // @@protoc_insertion_point(field_list:zmqsample.Matrix.element)
  return element_;
}
::google::protobuf::RepeatedField< float >*
Matrix::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:zmqsample.Matrix.element)
  return &element_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatrixGemm::kMatrixAFieldNumber;
const int MatrixGemm::kMatrixBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatrixGemm::MatrixGemm()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Gemm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zmqsample.MatrixGemm)
}
MatrixGemm::MatrixGemm(const MatrixGemm& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_matrixa()) {
    matrixa_ = new ::zmqsample::Matrix(*from.matrixa_);
  } else {
    matrixa_ = NULL;
  }
  if (from.has_matrixb()) {
    matrixb_ = new ::zmqsample::Matrix(*from.matrixb_);
  } else {
    matrixb_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:zmqsample.MatrixGemm)
}

void MatrixGemm::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&matrixa_, 0, reinterpret_cast<char*>(&matrixb_) -
    reinterpret_cast<char*>(&matrixa_) + sizeof(matrixb_));
}

MatrixGemm::~MatrixGemm() {
  // @@protoc_insertion_point(destructor:zmqsample.MatrixGemm)
  SharedDtor();
}

void MatrixGemm::SharedDtor() {
  if (this != internal_default_instance()) {
    delete matrixa_;
  }
  if (this != internal_default_instance()) {
    delete matrixb_;
  }
}

void MatrixGemm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatrixGemm::descriptor() {
  protobuf_Gemm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Gemm_2eproto::file_level_metadata[1].descriptor;
}

const MatrixGemm& MatrixGemm::default_instance() {
  protobuf_Gemm_2eproto::InitDefaults();
  return *internal_default_instance();
}

MatrixGemm* MatrixGemm::New(::google::protobuf::Arena* arena) const {
  MatrixGemm* n = new MatrixGemm;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MatrixGemm::Clear() {
// @@protoc_insertion_point(message_clear_start:zmqsample.MatrixGemm)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_matrixa()) {
      GOOGLE_DCHECK(matrixa_ != NULL);
      matrixa_->::zmqsample::Matrix::Clear();
    }
    if (has_matrixb()) {
      GOOGLE_DCHECK(matrixb_ != NULL);
      matrixb_->::zmqsample::Matrix::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MatrixGemm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zmqsample.MatrixGemm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .zmqsample.Matrix matrixA = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matrixa()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .zmqsample.Matrix matrixB = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matrixb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zmqsample.MatrixGemm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zmqsample.MatrixGemm)
  return false;
#undef DO_
}

void MatrixGemm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zmqsample.MatrixGemm)
  // required .zmqsample.Matrix matrixA = 1;
  if (has_matrixa()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->matrixa_, output);
  }

  // required .zmqsample.Matrix matrixB = 2;
  if (has_matrixb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->matrixb_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zmqsample.MatrixGemm)
}

::google::protobuf::uint8* MatrixGemm::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zmqsample.MatrixGemm)
  // required .zmqsample.Matrix matrixA = 1;
  if (has_matrixa()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->matrixa_, false, target);
  }

  // required .zmqsample.Matrix matrixB = 2;
  if (has_matrixb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->matrixb_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zmqsample.MatrixGemm)
  return target;
}

size_t MatrixGemm::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:zmqsample.MatrixGemm)
  size_t total_size = 0;

  if (has_matrixa()) {
    // required .zmqsample.Matrix matrixA = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->matrixa_);
  }

  if (has_matrixb()) {
    // required .zmqsample.Matrix matrixB = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->matrixb_);
  }

  return total_size;
}
size_t MatrixGemm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zmqsample.MatrixGemm)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .zmqsample.Matrix matrixA = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->matrixa_);

    // required .zmqsample.Matrix matrixB = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->matrixb_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatrixGemm::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zmqsample.MatrixGemm)
  GOOGLE_DCHECK_NE(&from, this);
  const MatrixGemm* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MatrixGemm>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zmqsample.MatrixGemm)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zmqsample.MatrixGemm)
    MergeFrom(*source);
  }
}

void MatrixGemm::MergeFrom(const MatrixGemm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zmqsample.MatrixGemm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_matrixa()) {
      mutable_matrixa()->::zmqsample::Matrix::MergeFrom(from.matrixa());
    }
    if (from.has_matrixb()) {
      mutable_matrixb()->::zmqsample::Matrix::MergeFrom(from.matrixb());
    }
  }
}

void MatrixGemm::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zmqsample.MatrixGemm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatrixGemm::CopyFrom(const MatrixGemm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zmqsample.MatrixGemm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatrixGemm::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_matrixa()) {
    if (!this->matrixa_->IsInitialized()) return false;
  }
  if (has_matrixb()) {
    if (!this->matrixb_->IsInitialized()) return false;
  }
  return true;
}

void MatrixGemm::Swap(MatrixGemm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatrixGemm::InternalSwap(MatrixGemm* other) {
  std::swap(matrixa_, other->matrixa_);
  std::swap(matrixb_, other->matrixb_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MatrixGemm::GetMetadata() const {
  protobuf_Gemm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Gemm_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MatrixGemm

// required .zmqsample.Matrix matrixA = 1;
bool MatrixGemm::has_matrixa() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MatrixGemm::set_has_matrixa() {
  _has_bits_[0] |= 0x00000001u;
}
void MatrixGemm::clear_has_matrixa() {
  _has_bits_[0] &= ~0x00000001u;
}
void MatrixGemm::clear_matrixa() {
  if (matrixa_ != NULL) matrixa_->::zmqsample::Matrix::Clear();
  clear_has_matrixa();
}
const ::zmqsample::Matrix& MatrixGemm::matrixa() const {
  // @@protoc_insertion_point(field_get:zmqsample.MatrixGemm.matrixA)
  return matrixa_ != NULL ? *matrixa_
                         : *::zmqsample::Matrix::internal_default_instance();
}
::zmqsample::Matrix* MatrixGemm::mutable_matrixa() {
  set_has_matrixa();
  if (matrixa_ == NULL) {
    matrixa_ = new ::zmqsample::Matrix;
  }
  // @@protoc_insertion_point(field_mutable:zmqsample.MatrixGemm.matrixA)
  return matrixa_;
}
::zmqsample::Matrix* MatrixGemm::release_matrixa() {
  // @@protoc_insertion_point(field_release:zmqsample.MatrixGemm.matrixA)
  clear_has_matrixa();
  ::zmqsample::Matrix* temp = matrixa_;
  matrixa_ = NULL;
  return temp;
}
void MatrixGemm::set_allocated_matrixa(::zmqsample::Matrix* matrixa) {
  delete matrixa_;
  matrixa_ = matrixa;
  if (matrixa) {
    set_has_matrixa();
  } else {
    clear_has_matrixa();
  }
  // @@protoc_insertion_point(field_set_allocated:zmqsample.MatrixGemm.matrixA)
}

// required .zmqsample.Matrix matrixB = 2;
bool MatrixGemm::has_matrixb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MatrixGemm::set_has_matrixb() {
  _has_bits_[0] |= 0x00000002u;
}
void MatrixGemm::clear_has_matrixb() {
  _has_bits_[0] &= ~0x00000002u;
}
void MatrixGemm::clear_matrixb() {
  if (matrixb_ != NULL) matrixb_->::zmqsample::Matrix::Clear();
  clear_has_matrixb();
}
const ::zmqsample::Matrix& MatrixGemm::matrixb() const {
  // @@protoc_insertion_point(field_get:zmqsample.MatrixGemm.matrixB)
  return matrixb_ != NULL ? *matrixb_
                         : *::zmqsample::Matrix::internal_default_instance();
}
::zmqsample::Matrix* MatrixGemm::mutable_matrixb() {
  set_has_matrixb();
  if (matrixb_ == NULL) {
    matrixb_ = new ::zmqsample::Matrix;
  }
  // @@protoc_insertion_point(field_mutable:zmqsample.MatrixGemm.matrixB)
  return matrixb_;
}
::zmqsample::Matrix* MatrixGemm::release_matrixb() {
  // @@protoc_insertion_point(field_release:zmqsample.MatrixGemm.matrixB)
  clear_has_matrixb();
  ::zmqsample::Matrix* temp = matrixb_;
  matrixb_ = NULL;
  return temp;
}
void MatrixGemm::set_allocated_matrixb(::zmqsample::Matrix* matrixb) {
  delete matrixb_;
  matrixb_ = matrixb;
  if (matrixb) {
    set_has_matrixb();
  } else {
    clear_has_matrixb();
  }
  // @@protoc_insertion_point(field_set_allocated:zmqsample.MatrixGemm.matrixB)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace zmqsample

// @@protoc_insertion_point(global_scope)
