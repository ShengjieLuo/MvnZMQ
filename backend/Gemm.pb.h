// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Gemm.proto

#ifndef PROTOBUF_Gemm_2eproto__INCLUDED
#define PROTOBUF_Gemm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace zmqsample {
class Matrix;
class MatrixDefaultTypeInternal;
extern MatrixDefaultTypeInternal _Matrix_default_instance_;
class MatrixGemm;
class MatrixGemmDefaultTypeInternal;
extern MatrixGemmDefaultTypeInternal _MatrixGemm_default_instance_;
}  // namespace zmqsample

namespace zmqsample {

namespace protobuf_Gemm_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_Gemm_2eproto

// ===================================================================

class Matrix : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zmqsample.Matrix) */ {
 public:
  Matrix();
  virtual ~Matrix();

  Matrix(const Matrix& from);

  inline Matrix& operator=(const Matrix& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Matrix& default_instance();

  static inline const Matrix* internal_default_instance() {
    return reinterpret_cast<const Matrix*>(
               &_Matrix_default_instance_);
  }

  void Swap(Matrix* other);

  // implements Message ----------------------------------------------

  inline Matrix* New() const PROTOBUF_FINAL { return New(NULL); }

  Matrix* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Matrix& from);
  void MergeFrom(const Matrix& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Matrix* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float element = 3;
  int element_size() const;
  void clear_element();
  static const int kElementFieldNumber = 3;
  float element(int index) const;
  void set_element(int index, float value);
  void add_element(float value);
  const ::google::protobuf::RepeatedField< float >&
      element() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_element();

  // required int32 dimensionX = 1;
  bool has_dimensionx() const;
  void clear_dimensionx();
  static const int kDimensionXFieldNumber = 1;
  ::google::protobuf::int32 dimensionx() const;
  void set_dimensionx(::google::protobuf::int32 value);

  // required int32 dimensionY = 2;
  bool has_dimensiony() const;
  void clear_dimensiony();
  static const int kDimensionYFieldNumber = 2;
  ::google::protobuf::int32 dimensiony() const;
  void set_dimensiony(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zmqsample.Matrix)
 private:
  void set_has_dimensionx();
  void clear_has_dimensionx();
  void set_has_dimensiony();
  void clear_has_dimensiony();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > element_;
  ::google::protobuf::int32 dimensionx_;
  ::google::protobuf::int32 dimensiony_;
  friend struct  protobuf_Gemm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MatrixGemm : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zmqsample.MatrixGemm) */ {
 public:
  MatrixGemm();
  virtual ~MatrixGemm();

  MatrixGemm(const MatrixGemm& from);

  inline MatrixGemm& operator=(const MatrixGemm& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatrixGemm& default_instance();

  static inline const MatrixGemm* internal_default_instance() {
    return reinterpret_cast<const MatrixGemm*>(
               &_MatrixGemm_default_instance_);
  }

  void Swap(MatrixGemm* other);

  // implements Message ----------------------------------------------

  inline MatrixGemm* New() const PROTOBUF_FINAL { return New(NULL); }

  MatrixGemm* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MatrixGemm& from);
  void MergeFrom(const MatrixGemm& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MatrixGemm* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .zmqsample.Matrix matrixA = 1;
  bool has_matrixa() const;
  void clear_matrixa();
  static const int kMatrixAFieldNumber = 1;
  const ::zmqsample::Matrix& matrixa() const;
  ::zmqsample::Matrix* mutable_matrixa();
  ::zmqsample::Matrix* release_matrixa();
  void set_allocated_matrixa(::zmqsample::Matrix* matrixa);

  // required .zmqsample.Matrix matrixB = 2;
  bool has_matrixb() const;
  void clear_matrixb();
  static const int kMatrixBFieldNumber = 2;
  const ::zmqsample::Matrix& matrixb() const;
  ::zmqsample::Matrix* mutable_matrixb();
  ::zmqsample::Matrix* release_matrixb();
  void set_allocated_matrixb(::zmqsample::Matrix* matrixb);

  // @@protoc_insertion_point(class_scope:zmqsample.MatrixGemm)
 private:
  void set_has_matrixa();
  void clear_has_matrixa();
  void set_has_matrixb();
  void clear_has_matrixb();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::zmqsample::Matrix* matrixa_;
  ::zmqsample::Matrix* matrixb_;
  friend struct  protobuf_Gemm_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Matrix

// required int32 dimensionX = 1;
inline bool Matrix::has_dimensionx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Matrix::set_has_dimensionx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Matrix::clear_has_dimensionx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Matrix::clear_dimensionx() {
  dimensionx_ = 0;
  clear_has_dimensionx();
}
inline ::google::protobuf::int32 Matrix::dimensionx() const {
  // @@protoc_insertion_point(field_get:zmqsample.Matrix.dimensionX)
  return dimensionx_;
}
inline void Matrix::set_dimensionx(::google::protobuf::int32 value) {
  set_has_dimensionx();
  dimensionx_ = value;
  // @@protoc_insertion_point(field_set:zmqsample.Matrix.dimensionX)
}

// required int32 dimensionY = 2;
inline bool Matrix::has_dimensiony() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Matrix::set_has_dimensiony() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Matrix::clear_has_dimensiony() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Matrix::clear_dimensiony() {
  dimensiony_ = 0;
  clear_has_dimensiony();
}
inline ::google::protobuf::int32 Matrix::dimensiony() const {
  // @@protoc_insertion_point(field_get:zmqsample.Matrix.dimensionY)
  return dimensiony_;
}
inline void Matrix::set_dimensiony(::google::protobuf::int32 value) {
  set_has_dimensiony();
  dimensiony_ = value;
  // @@protoc_insertion_point(field_set:zmqsample.Matrix.dimensionY)
}

// repeated float element = 3;
inline int Matrix::element_size() const {
  return element_.size();
}
inline void Matrix::clear_element() {
  element_.Clear();
}
inline float Matrix::element(int index) const {
  // @@protoc_insertion_point(field_get:zmqsample.Matrix.element)
  return element_.Get(index);
}
inline void Matrix::set_element(int index, float value) {
  element_.Set(index, value);
  // @@protoc_insertion_point(field_set:zmqsample.Matrix.element)
}
inline void Matrix::add_element(float value) {
  element_.Add(value);
  // @@protoc_insertion_point(field_add:zmqsample.Matrix.element)
}
inline const ::google::protobuf::RepeatedField< float >&
Matrix::element() const {
  // @@protoc_insertion_point(field_list:zmqsample.Matrix.element)
  return element_;
}
inline ::google::protobuf::RepeatedField< float >*
Matrix::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:zmqsample.Matrix.element)
  return &element_;
}

// -------------------------------------------------------------------

// MatrixGemm

// required .zmqsample.Matrix matrixA = 1;
inline bool MatrixGemm::has_matrixa() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatrixGemm::set_has_matrixa() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatrixGemm::clear_has_matrixa() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatrixGemm::clear_matrixa() {
  if (matrixa_ != NULL) matrixa_->::zmqsample::Matrix::Clear();
  clear_has_matrixa();
}
inline const ::zmqsample::Matrix& MatrixGemm::matrixa() const {
  // @@protoc_insertion_point(field_get:zmqsample.MatrixGemm.matrixA)
  return matrixa_ != NULL ? *matrixa_
                         : *::zmqsample::Matrix::internal_default_instance();
}
inline ::zmqsample::Matrix* MatrixGemm::mutable_matrixa() {
  set_has_matrixa();
  if (matrixa_ == NULL) {
    matrixa_ = new ::zmqsample::Matrix;
  }
  // @@protoc_insertion_point(field_mutable:zmqsample.MatrixGemm.matrixA)
  return matrixa_;
}
inline ::zmqsample::Matrix* MatrixGemm::release_matrixa() {
  // @@protoc_insertion_point(field_release:zmqsample.MatrixGemm.matrixA)
  clear_has_matrixa();
  ::zmqsample::Matrix* temp = matrixa_;
  matrixa_ = NULL;
  return temp;
}
inline void MatrixGemm::set_allocated_matrixa(::zmqsample::Matrix* matrixa) {
  delete matrixa_;
  matrixa_ = matrixa;
  if (matrixa) {
    set_has_matrixa();
  } else {
    clear_has_matrixa();
  }
  // @@protoc_insertion_point(field_set_allocated:zmqsample.MatrixGemm.matrixA)
}

// required .zmqsample.Matrix matrixB = 2;
inline bool MatrixGemm::has_matrixb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatrixGemm::set_has_matrixb() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatrixGemm::clear_has_matrixb() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatrixGemm::clear_matrixb() {
  if (matrixb_ != NULL) matrixb_->::zmqsample::Matrix::Clear();
  clear_has_matrixb();
}
inline const ::zmqsample::Matrix& MatrixGemm::matrixb() const {
  // @@protoc_insertion_point(field_get:zmqsample.MatrixGemm.matrixB)
  return matrixb_ != NULL ? *matrixb_
                         : *::zmqsample::Matrix::internal_default_instance();
}
inline ::zmqsample::Matrix* MatrixGemm::mutable_matrixb() {
  set_has_matrixb();
  if (matrixb_ == NULL) {
    matrixb_ = new ::zmqsample::Matrix;
  }
  // @@protoc_insertion_point(field_mutable:zmqsample.MatrixGemm.matrixB)
  return matrixb_;
}
inline ::zmqsample::Matrix* MatrixGemm::release_matrixb() {
  // @@protoc_insertion_point(field_release:zmqsample.MatrixGemm.matrixB)
  clear_has_matrixb();
  ::zmqsample::Matrix* temp = matrixb_;
  matrixb_ = NULL;
  return temp;
}
inline void MatrixGemm::set_allocated_matrixb(::zmqsample::Matrix* matrixb) {
  delete matrixb_;
  matrixb_ = matrixb;
  if (matrixb) {
    set_has_matrixb();
  } else {
    clear_has_matrixb();
  }
  // @@protoc_insertion_point(field_set_allocated:zmqsample.MatrixGemm.matrixB)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace zmqsample

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Gemm_2eproto__INCLUDED
